{"version":3,"sources":["favourites.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAqBa,mBAAmB,GAAhC;gBASI,YAAoB,OAAoB;oBAApB,YAAO,GAAP,OAAO,CAAa;oBAExC,UAAK,GAAW,YAAY,CAAA;gBAFgB,CAAC;gBAI7C,QAAQ;oBACJ,IAAI,CAAC,IAAI,EAAE,CAAC;oBACZ,IAAI,CAAC,GAAG,GAAG,IAAI,YAAG,CAAC,IAAI,CAAC,CAAC;oBACzB,IAAI,CAAC,EAAE,GAAG,uBAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBACxE,CAAC;gBAED,WAAW;oBACP,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;gBAC1B,CAAC;gBAED,IAAI;oBACA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,SAAS,CAC5B,IAAI,CAAC,EAAE;wBACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACrB,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,GAAQ,KAAK,CAC1C,CAAC;gBACN,CAAC;gBAEO,IAAI;gBAEZ,CAAC;aAEJ,CAAA;YApCY,mBAAmB;gBAX/B,gBAAS,CAAC;oBACP,QAAQ,EAAE,YAAY;oBAEtB,QAAQ,EAAE;;;KAGT;oBACD,MAAM,EAAE,EACP;iBACJ,CAAC;iDAW+B,0BAAW;eAT/B,mBAAmB,CAoC/B;;QAAA,CAAC","file":"favourites.component.js","sourcesContent":["import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { PostService } from \"./post.service\";\r\nimport { Item } from \"./item\"\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { forEach } from \"@angular/router/src/utils/collection\";\r\nimport { Console } from \"@angular/compiler/src/private_import_core\";\r\nimport { first } from \"rxjs/operators/first\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\nimport { Car } from \"./object\";\r\n \r\n@Component({\r\n    selector: \"favourites\",\r\n\r\n    template: `\r\n<p *ngIf=\"item\">\r\n<span>{{item.Title}}</span>\r\n</p>`,\r\n    styles: [\r\n    ]\r\n})\r\n\r\nexport class FavouritesComponent implements OnInit, OnDestroy {\r\n\r\n    car: Car;\r\n    item: Item;\r\n    items: Item[];\r\n    sb: Subscription;\r\n\r\n    errorMessage: string;\r\n\r\n    constructor(private service: PostService) { }\r\n\r\n    Title: string = \"Favourites\"\r\n\r\n    ngOnInit() {\r\n        this.getP();\r\n        this.car = new Car(\"V8\");\r\n        this.sb = Observable.timer(5000, 5000).subscribe(() => this.getP());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.sb.unsubscribe();\r\n    }\r\n\r\n    getP(): void {\r\n        this.service.getPost().subscribe(\r\n            item => {\r\n                this.item = item;\r\n            },\r\n            error => this.errorMessage = <any>error\r\n        );\r\n    }\r\n\r\n    private letP(): void {\r\n\r\n    }\r\n\r\n}"]}